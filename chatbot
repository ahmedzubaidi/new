# chatbot.py

import nltk
from nltk.stem import WordNetLemmatizer
import numpy as np
import random
import json
from flask import Flask, render_template, request, jsonify

# تحميل البيانات
with open('intents.json', 'r', encoding='utf-8') as file:
    intents = json.load(file)

# إعداد المعالجة اللغوية
lemmatizer = WordNetLemmatizer()
words = []
classes = []
documents = []
ignore_letters = ['؟', '!', '،', '.', ',']

for intent in intents['intents']:
    for pattern in intent['patterns']:
        word_list = nltk.word_tokenize(pattern)
        words.extend(word_list)
        documents.append((word_list, intent['tag']))
        if intent['tag'] not in classes:
            classes.append(intent['tag'])

words = [lemmatizer.lemmatize(word.lower()) for word in words if word not in ignore_letters]
words = sorted(list(set(words)))

classes = sorted(list(set(classes)))

# إنشاء البيانات التدريبية
training = []
output_empty = [0] * len(classes)

for doc in documents:
    bag = []
    pattern_words = doc[0]
    pattern_words = [lemmatizer.lemmatize(word.lower()) for word in pattern_words]
    for w in words:
        bag.append(1) if w in pattern_words else bag.append(0)
    
    output_row = list(output_empty)
    output_row[classes.index(doc[1])] = 1
    
    training.append([bag, output_row])

# تحويل إلى مصفوفات numpy
training = np.array(training, dtype=object)
train_x = np.array(list(training[:,0]))
train_y = np.array(list(training[:,1]))

# نموذج بسيط باستخدام numpy للردود
def predict_class(sentence):
    bag = [0]*len(words)
    sentence_words = nltk.word_tokenize(sentence)
    sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]
    for s in sentence_words:
        for i,w in enumerate(words):
            if w == s:
                bag[i] = 1
    # حساب درجة التشابه البسيطة
    similarity = np.dot(train_x, bag)
    if np.sum(similarity) == 0:
        return "لم أفهم ما تقوله. هل يمكنك إعادة صياغة سؤالك؟"
    else:
        index = np.argmax(similarity)
        tag = classes[np.argmax(train_y[index])]
        for intent in intents['intents']:
            if intent['tag'] == tag:
                return random.choice(intent['responses'])

# إعداد Flask
app = Flask(__name__)

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/get", methods=['GET'])
def get_bot_response():
    user_text = request.args.get('msg')
    response = predict_class(user_text)
    return jsonify(response)

if __name__ == "__main__":
    app.run(debug=True)
